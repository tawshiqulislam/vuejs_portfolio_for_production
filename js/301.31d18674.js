"use strict";(self["webpackChunkprotfolio_front_1"]=self["webpackChunkprotfolio_front_1"]||[]).push([[301],{5301:function(e,t,n){n.r(t),n.d(t,{default:function(){return _}});var o=n(6768),s=n(4232),a=n(5130);const r={class:"blog-container"},i={class:"blog-card"},p={class:"blog-image-container"},l=["src","alt"],c={class:"blog-overlay"},d={class:"blog-actions"},u=["onClick"],h={class:"blog-info"},m={class:"blog-meta"},g={class:"blog-category text-warning"},b={class:"blog-excerpt"},f={class:"blog-actions mt-4 mb-2"},v=["onClick"],y={class:"modal-header"},w={class:"modal-body"},k=["src","alt"],q={class:"modal-details"},P={class:"modal-text"},L=["innerHTML"],T={class:"modal-tags"},j={class:"tags-stack"};function x(e,t,n,x,A,S){const C=(0,o.g2)("vue-particles"),H=(0,o.g2)("Slide"),D=(0,o.g2)("Navigation"),_=(0,o.g2)("Pagination"),M=(0,o.g2)("Carousel");return(0,o.uX)(),(0,o.CE)("div",r,[(0,o.bF)(C,{id:"tsparticles",onParticlesLoaded:e.particlesLoaded,options:e.particlesOptions},null,8,["onParticlesLoaded","options"]),(0,o.Lk)("div",{class:(0,s.C4)(["container blog-content mt-2",e.animationClass])},[t[5]||(t[5]=(0,o.Lk)("div",{class:"row d-flex justify-content-around"},[(0,o.Lk)("div",{class:"col-md-12 text-right text-white"},[(0,o.Lk)("h1",{class:"text-warning"},"BLOGS"),(0,o.Lk)("h3",{class:"text-white"},"TECH INSIGHTS")])],-1)),(0,o.bF)(M,(0,o.v6)(e.settings,{breakpoints:e.breakpoints,autoplay:3500,"wrap-around":!0,pauseAutoplayOnHover:!0,transition:500}),{addons:(0,o.k6)((()=>[(0,o.bF)(D),(0,o.bF)(_)])),default:(0,o.k6)((()=>[((0,o.uX)(!0),(0,o.CE)(o.FK,null,(0,o.pI)(e.blogs,(n=>((0,o.uX)(),(0,o.Wv)(H,{key:n.id},{default:(0,o.k6)((()=>[(0,o.Lk)("div",i,[(0,o.Lk)("div",p,[(0,o.Lk)("img",{class:"blog-image",src:n.image,alt:n.name},null,8,l),(0,o.Lk)("div",c,[(0,o.Lk)("div",d,[(0,o.Lk)("button",{onClick:t=>e.openBlogDetails(n),class:"action-btn read-btn"},t[3]||(t[3]=[(0,o.Lk)("i",{class:"fas fa-book-open"},null,-1),(0,o.eW)(" Read More ")]),8,u)])])]),(0,o.Lk)("div",h,[(0,o.Lk)("div",m,[(0,o.Lk)("span",g,(0,s.v_)(n.name),1)]),(0,o.Lk)("p",b,(0,s.v_)(e.truncate(n.description,120)),1),(0,o.Lk)("div",f,[(0,o.Lk)("button",{onClick:(0,a.D$)((t=>e.openBlogDetails(n)),["stop"]),class:"action-btn details-btn"},t[4]||(t[4]=[(0,o.Lk)("i",{class:"fas fa-info-circle"},null,-1),(0,o.eW)(" Read Full Article ")]),8,v)])])])])),_:2},1024)))),128))])),_:1},16,["breakpoints"])],2),e.selectedBlog?((0,o.uX)(),(0,o.CE)("div",{key:0,class:"modal-overlay",onClick:t[2]||(t[2]=(...t)=>e.closeBlogDetails&&e.closeBlogDetails(...t))},[(0,o.Lk)("div",{class:"modal-content",onClick:t[1]||(t[1]=(0,a.D$)((()=>{}),["stop"]))},[(0,o.Lk)("button",{class:"modal-close",onClick:t[0]||(t[0]=(...t)=>e.closeBlogDetails&&e.closeBlogDetails(...t))},"×"),(0,o.Lk)("div",y,[(0,o.Lk)("h2",null,(0,s.v_)(e.selectedBlog.name),1),t[6]||(t[6]=(0,o.Lk)("div",{class:"modal-meta"},null,-1))]),(0,o.Lk)("div",w,[(0,o.Lk)("img",{class:"modal-image",src:e.selectedBlog.image,alt:e.selectedBlog.name},null,8,k),(0,o.Lk)("div",q,[(0,o.Lk)("div",P,[(0,o.Lk)("p",{innerHTML:e.selectedBlog.fullDescription},null,8,L)]),(0,o.Lk)("div",T,[t[7]||(t[7]=(0,o.Lk)("h4",null,"Topics",-1)),(0,o.Lk)("div",j,[((0,o.uX)(!0),(0,o.CE)(o.FK,null,(0,o.pI)(e.selectedBlog.tags,((e,t)=>((0,o.uX)(),(0,o.CE)("span",{class:"tag-badge",key:t},(0,s.v_)(e),1)))),128))])])])]),t[8]||(t[8]=(0,o.Lk)("div",{class:"modal-footer"},[(0,o.Lk)("a",{href:"#",class:"modal-btn"},[(0,o.Lk)("i",{class:"fas fa-share-alt"}),(0,o.eW)(" Share Article ")])],-1))])])):(0,o.Q3)("",!0)])}var A=JSON.parse('{"G":[{"id":1,"image":"/images/blogs/A-Complete-Guide-on-How-to-Use-Python-for-Web-Development.png","name":"Building a Dynamic Website with Django/Python: A Step-by-Step Guide","description":"Are you interested in creating your own dynamic website but unsure where to start? Look no further! In this tutorial, we will walk through the process of building a dynamic website using Django, a high-level Python web framework...","fullDescription":"<p>Are you interested in creating your own dynamic website but unsure where to start? Look no further! In this tutorial, we will walk through the process of building a dynamic website using Django, a high-level Python web framework. Even if you have little to no prior programming experience, you can follow along and create your own website.</p>\\n\\n<h1>Introduction</h1>\\n\\n<p>Django is a powerful web framework that simplifies the process of building web applications in Python. It follows the MVC (Model-View-Controller) architecture, which separates the data model, user interface, and application logic. This tutorial will cover the essential steps to create a dynamic website with multiple pages that interact with a database to display data.</p>\\n\\n<h2>Prerequisites</h2>\\n\\n<p>Before we dive into building our website, make sure you have the following prerequisites installed on your system:</p>\\n\\n<p>- Python</p>\\n\\n<h2>Step 1: Setting Up the Project</h2>\\n\\n<p>1. Create an empty folder for your project.<br />2. Open the folder in your preferred code editor (e.g., VS Code).<br />3. Set up a virtual environment to isolate your project dependencies.</p>\\n\\n<blockquote><pre>python -m venv .venv</pre></blockquote>\\n\\n<p>4. Activate the virtual environment.</p>\\n\\n<blockquote><pre>source .venv/bin/activate # For Mac/Linux\\n.venv\\\\Scripts\\\\activate # For Windows</pre></blockquote>\\n\\n<p>5. Install Django within the virtual environment.</p>\\n\\n<blockquote><pre>pip install django</pre></blockquote>\\n\\n<h2>Step 2: Creating the Django Project and App</h2>\\n\\n<p>1. Create a new Django project.</p>\\n\\n<blockquote><pre>django-admin startproject website</pre></blockquote>\\n\\n<p>2. Navigate into the project directory.</p>\\n\\n<blockquote><pre>cd website</pre></blockquote>\\n\\n<p>3. Create a new Django app within the project.</p>\\n\\n<blockquote><pre>python manage.py startapp music</pre></blockquote>\\n\\n<p>4. Add your Django app to the project settings</p>\\n\\n<blockquote><pre># website/settings.py\\n\\nINSTALLED_APPS = [\\n    \'django.contrib.admin\',\\n    \'django.contrib.auth\',\\n    \'django.contrib.contenttypes\',\\n    \'django.contrib.sessions\',\\n    \'django.contrib.messages\',\\n    \'django.contrib.staticfiles\',\\n    \'music\' #add this\\n]</pre></blockquote>\\n\\n<h2>Step 3: Configuring URLs and Views</h2>\\n\\n<p>1. Define views for your web pages inside the app.</p>\\n\\n<blockquote><pre># music/views.py\\n\\nfrom django.shortcuts import render\\ndef home(request):\\n return render(request, \'home.html\')\\ndef about(request):\\n return render(request, \'about.html\')\\n# Define other views (e.g., contact, product) similarly</pre></blockquote>\\n\\n<p>2. Configure URL patterns to map views to URLs.</p>\\n\\n<blockquote><pre># website/urls.py\\n\\nfrom django.contrib import admin\\nfrom django.urls import path\\nfrom music.views import home, about\\n\\nurlpatterns = [\\n path(\'admin/\', admin.site.urls),\\n path(\'\', home),\\n path(\'about/\', about),\\n # Add URLs for other views here\\n]</pre></blockquote>\\n\\n<h2>Step 4: Creating HTML Templates</h2>\\n\\n<p>1. Create a directory with the name ‘templates’ inside the directory of your app ‘music’ and create HTML templates for each page inside the `templates` directory of your app.</p>\\n\\n<blockquote><pre>\x3c!-- music/templates/home.html --\x3e\\n\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n<head>\\n <meta charset=\\"UTF-8\\">\\n <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">\\n <title>Home</title>\\n</head>\\n<body>\\n <h1>Welcome to My Website</h1>\\n \x3c!-- Add content here --\x3e\\n</body>\\n</html></pre></blockquote>\\n\\n<p>2. Repeat the above step for other pages like `about.html`, `contact.html`, etc.</p>\\n\\n<h2>Step 5: Setting Up the Database</h2>\\n\\n<p>1. Define models for your database tables inside the app’s `models.py` file.</p>\\n\\n<blockquote><pre># music/models.py\\n\\nfrom django.db import models\\n\\nclass Album(models.Model):\\n name = models.CharField(max_length=100)\\n artist = models.ForeignKey(Artists)\\n release_date = models.DateField()\\n # Add more fields as needed</pre></blockquote>\\n\\n<p>2. Run database migrations to create the corresponding tables in the database.</p>\\n\\n<blockquote><pre>python manage.py makemigrations\\npython manage.py migrate</pre></blockquote>\\n\\n<h2>Step 6: Admin Panel Configuration</h2>\\n\\n<p>1. Create a superuser account to access the Django admin panel.</p>\\n\\n<pre>python manage.py createsuperuser</pre>\\n\\n<p>2. Register your models to manage them via the admin panel.</p>\\n\\n<blockquote><pre># music/admin.py\\n\\nfrom django.contrib import admin\\nfrom music.models import Album\\n\\nadmin.site.register(Album)</pre></blockquote>\\n\\n<p>3. Set up media files handling if you plan to store files like images in your database.</p>\\n\\n<p>Install pillow module</p>\\n\\n<blockquote><pre>pip install pillow</pre></blockquote>\\n\\n<p>Edit your project settings.</p>\\n\\n<blockquote><pre># website/settings.py\\n\\nimport os\\nSTATIC_ROOT = os.path.join(BASE_DIR, \'staticfiles\')\\nSTATIC_URL = \'/static/\'\\nSTATICFILES_DIRS = (\\n    os.path.join(BASE_DIR, \'static\'),\\n)\\nMEDIA_ROOT = os.path.join(BASE_DIR, \'media\')\\nMEDIA_URL = \'/media/\'\\nDEFAULT_AUTO_FIELD = \'django.db.models.BigAutoField\'</pre></blockquote>\\n\\n<p>Edit your project’s URLs configuration.</p>\\n\\n<blockquote><pre># website/urls.py\\n\\nfrom django.contrib import admin\\nfrom django.urls import path\\nfrom music.views import *\\nfrom django.conf import settings\\nfrom django.conf.urls.static import static\\n\\nurlpatterns = [\\n    path(\'admin/\', admin.site.urls),\\n    path(\'\', home),\\n    path(\'about/\', about),\\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</pre></blockquote>\\n\\n<p>These settings allow Django to serve media files during development.</p>\\n\\n<p>4. Run the server, access the admin panel at <code>http://127.0.0.1:8000/admin</code> and log in with the superuser credentials to add data to your database.</p>\\n\\n<pre>python manage.py runserver</pre>\\n\\n<h2>Step 7: Displaying Database Content on Web Pages</h2>\\n\\n<p>1. Modify your views to fetch data from the database and pass it to the templates.</p>\\n\\n<blockquote><pre># music/views.py\\n\\nfrom django.shortcuts import render\\nfrom music.models import Album\\n\\ndef home(request):\\n Albums = Album.objects.all()\\n return render(request, \'home.html\', {\'Albums\': Albums})</pre></blockquote>\\n\\n<p>2. Update your HTML templates to display dynamic content from the database.</p>\\n\\n<blockquote><pre>\x3c!-- music/templates/home.html --\x3e\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n<head>\\n <meta charset=\\"UTF-8\\">\\n <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">\\n <title>Home</title>\\n</head>\\n<body>\\n <h1>Welcome to My Website</h1>\\n <ul>\\n {% for Album in Albums %}\\n <li>{{ Album.name }} - {{ Album.artist }} - {{ Album.release_date }}</li>\\n {% endfor %}\\n </ul>\\n</body>\\n</html></pre></blockquote>\\n\\n<h1>Bonus: Handling Contact Form Submissions</h1>\\n\\n<h2>Setting Up the Model</h2>\\n\\n<blockquote><pre># music/models.py\\n\\nfrom django.db import models\\nclass User_Messages(models.Model):\\n    name = models.CharField(max_length=100)\\n    email = models.EmailField()\\n    subject = models.CharField(max_length=150)\\n    message = models.TextField()\\n    def __str__(self):\\n        return self.subject</pre></blockquote>\\n\\n<h2>Creating the View</h2>\\n\\n<blockquote><pre># music/views.py\\n\\nfrom django.shortcuts import render\\nfrom .models import User_Messages\\n\\ndef contact(request):\\n    success = False\\n    if request.method == \'POST\':\\n        name = request.POST.get(\'name\')\\n        email = request.POST.get(\'email\')\\n        subject = request.POST.get(\'subject\')\\n        message = request.POST.get(\'message\')\\n        user_message = User_Messages(name=name, email=email, subject=subject, message=message)\\n        user_message.save()\\n        success = True\\n    return render(request, \'contact.html\', {\'success\': success})</pre></blockquote>\\n\\n<h2>Designing the HTML Template</h2>\\n\\n<blockquote><pre>\x3c!-- music/templates/contact.html --\x3e\\n\\n{% extends \'base.html\' %} {% block content %}\\n<div class=\\"container mt-5\\">\\n  <h2>Contact Us</h2>\\n  <p>Please use the form below to send us your support request or feedback.</p>\\n  <form action=\\"{% url \'contact\' %}\\" method=\\"POST\\" class=\\"mt-5\\">\\n    {% csrf_token %}\\n    \x3c!-- Form fields --\x3e\\n    <button type=\\"submit\\" class=\\"btn btn-success my-3\\">Submit</button>\\n  </form>\\n</div>\\n\x3c!-- Success message --\x3e\\n{% if success %}\\n<div class=\\"alert alert-success alert-dismissible fade show\\" role=\\"alert\\">\\n  Message successfully sent!\\n  <button type=\\"button\\" class=\\"btn-close\\" data-bs-dismiss=\\"alert\\" aria-label=\\"Close\\"></button>\\n</div>\\n{% endif %}\\n{% endblock %}</pre></blockquote>\\n\\n<h2>Conclusion</h2>\\n\\n<p>Congratulations! You have successfully created a dynamic website using Django. By following this tutorial, you’ve learned the fundamental steps involved in building a web application, including setting up the project, defining URLs and views, creating HTML templates, configuring the database, and displaying dynamic content.</p>\\n\\n<p>Feel free to explore Django further and customize your website according to your preferences and requirements.</p>\\n\\n<p>To access the full code repository and test the website yourself, you can visit the GitHub repository <a href=\\"https://github.com/samuelmideksa/Django-website\\" target=\\"_blank\\">here</a></p>\\n\\n<p>Happy coding! 🚀</p><hr />\\n<p>Last updated on&nbsp;May 16th, 2024</p>","tags":["#WebDevelopment","#Python","#Django","#Programming"]},{"id":2,"image":"/images/blogs/vue-testing.png","name":"Unit Testing Vue Components","description":"Unit testing is a fundamental part of software development. Unit tests execute the smallest units of code in isolation, in order to increase ease of adding new features...","fulldescription":"<h2><a href=\\"https://v2.vuejs.org/v2/cookbook/unit-testing-vue-components#Base-Example\\" title=\\"Base Example\\">Base Example</a></h2>\\n\\n<p>Unit testing is a fundamental part of software development. Unit tests execute the smallest units of code in isolation, in order to increase ease of adding new features and track down bugs. Vue&rsquo;s&nbsp;<a href=\\"https://v2.vuejs.org/v2/guide/single-file-components\\">single-file components</a>&nbsp;make it straight forward to write unit tests for components in isolation. This lets you develop new features with confidence you are not breaking existing ones, and helps other developers understand what your component does.</p>\\n\\n<p>This simple example tests whether some text is rendered:</p>\\n\\n<table>\\n\\t<tbody>\\n\\t\\t<tr>\\n\\t\\t\\t<td>\\n\\t\\t\\t<blockquote>\\n\\t\\t\\t<pre>\\n<code>&lt;template&gt;\\n  &lt;div&gt;\\n    &lt;input v-model=&quot;username&quot;&gt;\\n    &lt;div\\n      v-if=&quot;error&quot;\\n      class=&quot;error&quot;\\n    &gt;\\n      {{ error }}\\n    &lt;/div&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;\\n\\n&lt;script&gt;\\nexport default {\\n  name: \'Hello\',\\n  data () {\\n    return {\\n      username: \'\'\\n    }\\n  },\\n\\n  computed: {\\n    error () {\\n      return this.username.trim().length &lt; 7\\n        ? \'Please enter a longer username\'\\n        : \'\'\\n    }\\n  }\\n}\\n&lt;/script&gt;\\n</code></pre>\\n\\t\\t\\t</blockquote>\\n\\t\\t\\t</td>\\n\\t\\t</tr>\\n\\t</tbody>\\n</table>\\n\\n<p>&nbsp;</p>\\n\\n<table>\\n\\t<tbody>\\n\\t\\t<tr>\\n\\t\\t\\t<td>\\n\\t\\t\\t<blockquote>\\n\\t\\t\\t<pre>\\n<code>import { shallowMount } from \'@vue/test-utils\'\\nimport Hello from \'./Hello.vue\'\\n\\ntest(\'Hello\', () =&gt; {\\n  // render the component\\n  const wrapper = shallowMount(Hello)\\n\\n  // should not allow for `username` less than 7 characters, excludes whitespace\\n  wrapper.setData({ username: \' \'.repeat(7) })\\n\\n  // assert the error is rendered\\n  expect(wrapper.find(\'.error\').exists()).toBe(true)\\n\\n  // update the name to be long enough\\n  wrapper.setData({ username: \'Lachlan\' })\\n\\n  // assert the error has gone away\\n  expect(wrapper.find(\'.error\').exists()).toBe(false)\\n})\\n</code></pre>\\n\\t\\t\\t</blockquote>\\n\\t\\t\\t</td>\\n\\t\\t</tr>\\n\\t</tbody>\\n</table>\\n\\n<p>The above code snippet shows how to test whether an error message is rendered based on the length of the username. It demonstrates the general idea of unit testing Vue components: render the component, and assert that the markup matches the state of the component.</p>\\n\\n<h2><a href=\\"https://v2.vuejs.org/v2/cookbook/unit-testing-vue-components#Why-test\\" title=\\"Why test?\\">Why test?</a></h2>\\n\\n<p>Component unit tests have lots of benefits:</p>\\n\\n<ul>\\n\\t<li>Provide documentation on how the component should behave</li>\\n\\t<li>Save time over testing manually</li>\\n\\t<li>Reduce bugs in new features</li>\\n\\t<li>Improve design</li>\\n\\t<li>Facilitate refactoring</li>\\n</ul>\\n\\n<p>Automated testing allows large teams of developers to maintain complex codebases.</p>\\n\\n<h4>Getting started</h4>\\n\\n<p><a href=\\"https://github.com/vuejs/vue-test-utils\\" rel=\\"noopener\\" target=\\"_blank\\">Vue Test Utils</a>&nbsp;is the official library for unit testing Vue components. The&nbsp;<a href=\\"https://github.com/vuejs/vue-cli\\" rel=\\"noopener\\" target=\\"_blank\\">vue-cli</a>&nbsp;<code>webpack</code>&nbsp;template comes with either Karma or Jest, both well supported test runners, and there are some&nbsp;<a href=\\"https://vue-test-utils.vuejs.org/guides/\\" rel=\\"noopener\\" target=\\"_blank\\">guides</a>&nbsp;in the Vue Test Utils documentation.</p>\\n\\n<h2><a href=\\"https://v2.vuejs.org/v2/cookbook/unit-testing-vue-components#Real-World-Example\\" title=\\"Real-World Example\\">Real-World Example</a></h2>\\n\\n<p>Unit tests should be:</p>\\n\\n<ul>\\n\\t<li>Fast to run</li>\\n\\t<li>Easy to understand</li>\\n\\t<li>Only test a&nbsp;<em>single unit of work</em></li>\\n</ul>\\n\\n<p>Let&rsquo;s continue building on the previous example, while introducing the idea of a&nbsp;<a href=\\"https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)\\" rel=\\"noopener\\" target=\\"_blank\\">factory function</a>&nbsp;to make our test more compact and readable. The component should:</p>\\n\\n<ul>\\n\\t<li>show a ‘Welcome to the Vue.js cookbook’ greeting.</li>\\n\\t<li>prompt the user to enter their username</li>\\n\\t<li>display an error if the entered username is less than seven letters</li>\\n</ul>\\n\\n<p>Let&rsquo;s take a look at the component code first:</p>\\n\\n<table>\\n\\t<tbody>\\n\\t\\t<tr>\\n\\t\\t\\t<td>\\n\\t\\t\\t<blockquote>\\n\\t\\t\\t<pre>\\n<code>&lt;template&gt;\\n  &lt;div&gt;\\n    &lt;div class=\\"message\\"&gt;\\n      {{ message }}\\n    &lt;/div&gt;\\n    Enter your username: &lt;input v-model=\\"username\\"&gt;\\n    &lt;div\\n      v-if=\\"error\\"\\n      class=\\"error\\"\\n    &gt;\\n      Please enter a username with at least seven letters.\\n    &lt;/div&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;\\n\\n&lt;script&gt;\\nexport default {\\n  name: \'Foo\',\\n\\n  data () {\\n    return {\\n      message: \'Welcome to the Vue.js cookbook\',\\n      username: \'\'\\n    }\\n  },\\n\\n  computed: {\\n    error () {\\n      return this.username.trim().length &lt; 7\\n    }\\n  }\\n}\\n&lt;/script&gt;\\n</code></pre>\\n\\t\\t\\t</blockquote>\\n\\t\\t\\t</td>\\n\\t\\t</tr>\\n\\t</tbody>\\n</table>\\n\\n<p>The things that we should test are:</p>\\n\\n<ul>\\n\\t<li>is the&nbsp;<code>message</code>&nbsp;rendered?</li>\\n\\t<li>if&nbsp;<code>error</code>&nbsp;is&nbsp;<code>true</code>,&nbsp;<code>&lt;div class=\\"error\\"&gt;</code>&nbsp;should be present</li>\\n\\t<li>if&nbsp;<code>error</code>&nbsp;is&nbsp;<code>false</code>,&nbsp;<code>&lt;div class=\\"error\\"&gt;</code>&nbsp;should not be present</li>\\n</ul>\\n\\n<p>And our first attempt at test:</p>\\n\\n<table>\\n\\t<tbody>\\n\\t\\t<tr>\\n\\t\\t\\t<td>\\n\\t\\t\\t<blockquote>\\n\\t\\t\\t<pre>\\n<code>import { shallowMount } from \'@vue/test-utils\'\\nimport Foo from \'./Foo.vue\'\\n\\ndescribe(\'Foo\', () =&gt; {\\n  it(\'renders a message and responds correctly to user input\', () =&gt; {\\n    const wrapper = shallowMount(Foo, {\\n      data() {\\n        return {\\n          message: \'Hello World\',\\n          username: \'\'\\n        }\\n      }\\n    })\\n\\n    // see if the message renders\\n    expect(wrapper.find(\'.message\').text()).toEqual(\'Hello World\')\\n\\n    // assert the error is rendered\\n    expect(wrapper.find(\'.error\').exists()).toBeTruthy()\\n\\n    // update the `username` and assert error is no longer rendered\\n    wrapper.setData({ username: \'Lachlan\' })\\n    expect(wrapper.find(\'.error\').exists()).toBeFalsy()\\n  })\\n})\\n</code></pre>\\n\\t\\t\\t</blockquote>\\n\\t\\t\\t</td>\\n\\t\\t</tr>\\n\\t</tbody>\\n</table>\\n\\n<p>There are some problems with the above:</p>\\n\\n<ul>\\n\\t<li>a single test is making assertions about different things</li>\\n\\t<li>difficult to tell the different states the component can be in, and what should be rendered</li>\\n</ul>\\n\\n<p>The below example improves the test by:</p>\\n\\n<ul>\\n\\t<li>only making one assertion per&nbsp;<code>it</code>&nbsp;block</li>\\n\\t<li>having short, clear test descriptions</li>\\n\\t<li>providing only the minimum data required for the test</li>\\n\\t<li>refactoring duplicated logic (creating the&nbsp;<code>wrapper</code>&nbsp;and setting the&nbsp;<code>username</code>&nbsp;variable) into a factory function</li>\\n</ul>\\n\\n<p><em>Updated test</em>:</p>\\n\\n<table>\\n\\t<tbody>\\n\\t\\t<tr>\\n\\t\\t\\t<td>\\n\\t\\t\\t<blockquote>\\n\\t\\t\\t<pre>\\n<code>import { shallowMount } from \'@vue/test-utils\'\\nimport Foo from \'./Foo\'\\n\\nconst factory = (values = {}) =&gt; {\\n  return shallowMount(Foo, {\\n    data () {\\n      return {\\n        ...values\\n      }\\n    }\\n  })\\n}\\n\\ndescribe(\'Foo\', () =&gt; {\\n  it(\'renders a welcome message\', () =&gt; {\\n    const wrapper = factory()\\n\\n    expect(wrapper.find(\'.message\').text()).toEqual(\\"Welcome to the Vue.js cookbook\\")\\n  })\\n\\n  it(\'renders an error when username is less than 7 characters\', () =&gt; {\\n    const wrapper = factory({ username: \'\'  })\\n\\n    expect(wrapper.find(\'.error\').exists()).toBeTruthy()\\n  })\\n\\n  it(\'renders an error when username is whitespace\', () =&gt; {\\n    const wrapper = factory({ username: \' \'.repeat(7) })\\n\\n    expect(wrapper.find(\'.error\').exists()).toBeTruthy()\\n  })\\n\\n  it(\'does not render an error when username is 7 characters or more\', () =&gt; {\\n    const wrapper = factory({ username: \'Lachlan\'  })\\n\\n    expect(wrapper.find(\'.error\').exists()).toBeFalsy()\\n  })\\n})\\n</code></pre>\\n\\t\\t\\t</blockquote>\\n\\t\\t\\t</td>\\n\\t\\t</tr>\\n\\t</tbody>\\n</table>\\n\\n<p>Points to note:</p>\\n\\n<p>At the top, we declare the factory function which merges the&nbsp;<code>values</code>&nbsp;object into&nbsp;<code>data</code>&nbsp;and returns a new&nbsp;<code>wrapper</code>&nbsp;instance. This way, we don&rsquo;t need to duplicate&nbsp;<code>const wrapper = shallowMount(Foo)</code>&nbsp;in every test. Another great benefit to this is when more complex components with a method or computed property you might want to mock or stub in every test, you only need to declare it once.</p>\\n\\n<h2><a href=\\"https://v2.vuejs.org/v2/cookbook/unit-testing-vue-components#Additional-Context\\" title=\\"Additional Context\\">Additional Context</a></h2>\\n\\n<p>The above test is fairly simple, but in practice Vue components often have other behaviors you want to test, such as:</p>\\n\\n<ul>\\n\\t<li>making API calls</li>\\n\\t<li>committing or dispatching mutations or actions with a&nbsp;<code>Vuex</code>&nbsp;store</li>\\n\\t<li>testing interaction</li>\\n</ul>\\n\\n<p>There are more complete examples showing such tests in the Vue Test Utils&nbsp;<a href=\\"https://vue-test-utils.vuejs.org/guides/\\" rel=\\"noopener\\" target=\\"_blank\\">guides</a>.</p>\\n\\n<p>Vue Test Utils and the enormous JavaScript ecosystem provides plenty of tooling to facilitate almost 100% test coverage. Unit tests are only one part of the testing pyramid, though. Some other types of tests include e2e (end to end) tests, and snapshot tests. Unit tests are the smallest and most simple of tests - they make assertions on the smallest units of work, isolating each part of a single component.</p>\\n\\n<p>Snapshot tests save the markup of your Vue component, and compare to the new one generated each time the test runs. If something changes, the developer is notified, and can decide if the change was intentional (the component was updated) or accidental (the component is behaving incorrectly).</p>\\n\\n<p>End to end tests ensure a number of components interact well together. They are more high level. Some examples might be testing if a user can sign up, log in, and update their username. These are slower to run than unit tests or snapshot tests.</p>\\n\\n<p>Unit tests are most useful during development, either to help a developer think about how to design a component, or refactor an existing component, and are often run every time code is changed.</p>\\n\\n<p>Higher level tests, such as end to end tests, run much slower. These usually run pre-deploy, to ensure each part of the system is working together correctly.</p>\\n\\n<p>More information about testing Vue components can be found in&nbsp;<a href=\\"https://www.manning.com/books/testing-vuejs-applications\\" rel=\\"noopener\\" target=\\"_blank\\">Testing Vue.js Applications</a>&nbsp;by core team member&nbsp;<a href=\\"https://eddyerburgh.me/\\" rel=\\"noopener\\" target=\\"_blank\\">Edd Yerburgh</a>.</p>\\n\\n<h2><a href=\\"https://v2.vuejs.org/v2/cookbook/unit-testing-vue-components#When-To-Avoid-This-Pattern\\" title=\\"When To Avoid This Pattern\\">When To Avoid This Pattern</a></h2>\\n\\n<p>Unit testing is an important part of any serious application. At first, when the vision of an application is not clear, unit testing might slow down development, but once a vision is established and real users will be interacting with the application, unit tests (and other types of automated tests) are absolutely essential to ensure the codebase is maintainable and scalable.</p>\\n\\n<p>Caught a mistake or want to contribute to the documentation?&nbsp;<a href=\\"https://github.com/vuejs/v2.vuejs.org/blob/master/src/v2/cookbook/unit-testing-vue-components.md\\" rel=\\"noopener\\" target=\\"_blank\\">Edit this on GitHub!&nbsp;</a>Deployed on&nbsp;<a href=\\"https://url.netlify.com/HJ8X2mxP8\\" rel=\\"noopener\\" target=\\"_blank\\">Netlify&nbsp;</a>.</p><hr />\\n<p>Last updated on&nbsp;January 7th, 2025</p>","tags":["#JavaScript","#ES6","#VueJS","#UnitTesting","#TDD","#TestDrivenDevelopment","#Jest"]},{"id":3,"image":"/images/blogs/nativephp-lead.png","name":"NativePHP v1 is finally here!","description":"We did it. We finally did it. NativePHP for desktop v1.0.0 is finally here! I almost don\'t believe it. This is a truly awesome milestone. For a project that started as just an idea...","fullDescription":"<p><strong>NativePHP for desktop v1.0.0 is finally here!</strong></p>\\n\\n<p>I almost don&#39;t believe it.</p>\\n\\n<p>This is a truly awesome milestone. For a project that started as just an idea, to see it reach a stable release and support building powerful apps across all major platforms is just incredible.</p>\\n\\n<p>NativePHP came to life April 1, 2023.</p>\\n\\n<p><strong>Fast-forward two years, and today, it&#39;s the best way for Laravel devs to build distributable desktop apps.</strong></p>\\n\\n<p>Whether it&rsquo;s internal tooling for their business, consumer-facing apps for their clients, or just cool hobby projects for the sheer delight of it, NativePHP is enabling hundreds of developers to realize their ideas faster than ever.</p>\\n\\n<p>Unlocking the ability to build native apps with Laravel is opening new doors to every Laravel developer&mdash;and even bringing more people into the Laravel ecosystem!</p>\\n\\n<p>&ldquo;Until I discovered NativePHP it was all vanilla PHP, JS and CSS. I&#39;ll integrate more Laravel functionality as I need to, now that I kind of understand it.&rdquo;<br />\\n&mdash; Will, learning programming with Laravel by developing a game in NativePHP</p>\\n\\n<h2><a href=\\"https://laravel-news.com/nativephp-v1#content-go-get-it\\" id=\\"content-go-get-it\\" title=\\"Permalink\\">#</a>Go get it!</h2>\\n\\n<p>If you&rsquo;ve already started building apps with an&nbsp;<code>alpha</code>&nbsp;or&nbsp;<code>beta</code>&nbsp;version of NativePHP, you simply need to update the dependency in your&nbsp;<code>composer.json</code>&nbsp;to the v1 release:</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>&quot;nativephp/electron&quot;: &quot;^1.0&quot;,</code></p>\\n</blockquote>\\n\\n<p>&nbsp;</p>\\n\\n<p>And then run&nbsp;<code>composer update</code>. As long as your app meets the minimum requirements, the upgrade should be smooth.</p>\\n\\n<p>If you haven&rsquo;t tried NativePHP yet, simply add the package into a new or existing app via Composer, install it and then run a debug build:</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>composer require nativephp/electron</code></p>\\n<p><code>php artisan native:install</code></p>\\n<p><code>php artisan native:serve</code></p>\\n</blockquote>\\n\\n<p>&nbsp;</p>\\n\\n<p>You should see your Laravel app appear in its own window, ready for you to start building something awesome!</p>\\n\\n<p>Note that this release of NativePHP has dropped support for Laravel 10 and PHP 8.1 and 8.2, so make sure your apps are up-to-date and ready to work with the latest tooling.</p>\\n\\n<p><strong>Go tell all your friends: NativePHP is ready for primetime!</strong></p>\\n\\n<p>But, of course, we&#39;re far from finished!<br />\\nRead the&nbsp;<a href=\\"https://github.com/orgs/NativePHP/discussions/547\\">official release announcement</a>&nbsp;for the full details of what&rsquo;s coming next&hellip;</p><hr />\\n<p>Last updated on&nbsp;March 7th, 2025</p>","tags":["#PHP","#NativePHP","#DesktopApps","#Laravel","v1.0.0"]},{"id":4,"image":"/images/blogs/crimson-broadcast-on-export.png","name":"Simplify Real-Time Notifications with Laravel\'s Anonymous Broadcasts","description":"Laravel introduces anonymous broadcasts, providing a streamlined approach to sending real-time updates to your frontend without the overhead of creating dedicated event classes and channels...","fullDescription":"<p>Laravel introduces anonymous broadcasts, providing a streamlined approach to sending real-time updates to your frontend without the overhead of creating dedicated event classes.</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>// Send a basic anonymous broadcast</code></p>\\n<p><code>Broadcast::on(&#39;my-channel&#39;)-&gt;send();</code></p>\\n</blockquote>\\n\\n<p>This simplified API enables quick implementation of real-time features when you need ad-hoc notifications without the formality of a full event class structure.</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>// Custom event name and data</code></p>\\n<p><code>Broadcast::on(&#39;orders.&#39;.$order-&gt;id)</code></p>\\n<p><code>-&gt;as(&#39;OrderPlaced&#39;)</code></p>\\n<p><code>-&gt;with([&#39;id&#39; =&gt; $order-&gt;id, &#39;total&#39; =&gt; $order-&gt;total])</code></p>\\n<p><code>-&gt;send();</code></p>\\n</blockquote>\\n\\n<p>The system offers flexibility with channel types to match your authentication requirements:</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>// Private channel broadcast</code></p>\\n<p><code>Broadcast::private(&#39;user.&#39;.$userId)-&gt;send();</code></p>\\n<p><code>&nbsp;</code></p>\\n<p><code>// Presence channel broadcast</code></p>\\n<p><code>Broadcast::presence(&#39;team-chat&#39;)-&gt;send();</code></p>\\n</blockquote>\\n\\n<p>You can control timing and recipient targeting with additional methods:</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>Broadcast::on(&#39;notifications&#39;)-&gt;sendNow();</code></p>\\n<p><code>&nbsp;</code></p>\\n<p><code>Broadcast::on(&#39;chat&#39;)-&gt;toOthers()-&gt;send();</code></p>\\n</blockquote>\\n\\n<p>On the frontend, you&#39;ll listen for these events with Laravel Echo as you normally would:</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>Echo.channel(&#39;orders.&#39; + orderId)</code></p>\\n<p><code>.listen(&#39;.OrderPlaced&#39;, (data) =&gt; {</code></p>\\n<p><code>showNotification(&#39;Order placed!&#39;, data);</code></p>\\n<p><code>});</code></p>\\n</blockquote>\\n\\n<p>Anonymous broadcasts are particularly useful for transient notifications like typing indicators, status updates, UI refresh triggers, and simple alerts that don&#39;t require persistent storage. By removing the need to create formal event classes for every notification, this feature accelerates development and reduces boilerplate, making real-time features more accessible in your Laravel applications.</p><hr />\\n<p>Last updated on&nbsp;March 14th, 2025</p>","tags":["#DynamicProgramming","#Laravel","#AnonymousBroadcasts","#RealTime","#EventBroadcasting","#PHPFramework"]},{"id":5,"image":"/images/blogs/laravel-test-assertions.png","name":"Laravel Test Assertions Package","description":"The Laravel Test Assertions package by Shift creator Jason McCreary is a set of helpful assertions for testing Laravel applications. The package provides a trait with useful...","fullDescription":"<p>The Laravel&nbsp;<a href=\\"https://github.com/jasonmccreary/laravel-test-assertions\\">Test Assertions</a>&nbsp;package by Shift creator&nbsp;<a href=\\"https://github.com/jasonmccreary\\">Jason McCreary</a>&nbsp;is a set of helpful assertions for testing Laravel applications. The package provides a trait with useful assertions, Laravel matcher methods, and general test helpers:</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>use JMac\\\\Testing\\\\Traits\\\\AdditionalAssertions;</code></p>\\n\\n<p><code>&nbsp;</code></p>\\n\\n<p><code>// Trait assertions</code></p>\\n\\n<p><code>$this-&gt;assertActionUsesFormRequest(string $controller, string $method, string $form_request);;</code></p>\\n\\n<p><code>$this-&gt;assertActionUsesMiddleware(string $controller, string $method, string|array $middleware);</code></p>\\n\\n<p><code>$this-&gt;assertRouteUsesFormRequest(string $routeName, string $formRequest);</code></p>\\n\\n<p><code>$this-&gt;assertRouteUsesMiddleware(string $routeName, array $middlewares, bool $exact);</code></p>\\n\\n<p><code>$this-&gt;assertValidationRules(array $expected, array $actual);</code></p>\\n\\n<p><code>$this-&gt;assertExactValidationRules(array $expected, array $actual);</code></p>\\n\\n<p><code>$this-&gt;assertValidationRuleContains($rule, string $class);</code></p>\\n\\n<p><code>$this-&gt;assertViewHasNull($key);</code></p>\\n\\n<p><code>$this-&gt;createFormRequest(string $class, array $data = []);</code></p>\\n</blockquote>\\n\\n<p>The author&nbsp;<a href=\\"https://x.com/gonedark/status/1910393349967691977\\">shared</a>&nbsp;an example of using the&nbsp;<code>freezeNow()</code>&nbsp;helper in a test to freeze time and make assertions.</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>// Time</code></p>\\n\\n<p><code>$package = Package::factory()-&gt;create();</code></p>\\n\\n<p><code>$slug = $this-&gt;faker()-&gt;slug(2);</code></p>\\n\\n<p><code>&nbsp;</code></p>\\n\\n<p><code>$this-&gt;freezeNow();</code></p>\\n\\n<p><code>&nbsp;</code></p>\\n\\n<p><code>// Make changes...</code></p>\\n\\n<p><code>$package-&gt;slug = $slug;</code></p>\\n\\n<p><code>$package-&gt;save();</code></p>\\n\\n<p><code>&nbsp;</code></p>\\n\\n<p><code>// Assert now</code></p>\\n\\n<p><code>$package-&gt;refresh();</code></p>\\n\\n<p><code>$this-&gt;assertNow($package-&gt;updated_at);</code></p>\\n</blockquote>\\n\\n<p>Finally, some matches you can use to determine if a variable is a Model, Collection, or Eloquent Collection instance:</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>use JMac\\\\Testing\\\\LaravelMatchers;</code></p>\\n\\n<p><code>&nbsp;</code></p>\\n\\n<p><code>// Matchers</code></p>\\n\\n<p><code>LaravelMatchers::isModel(Model $model = null);</code></p>\\n\\n<p><code>LaravelMatchers::isCollection(Collection $collection = null);</code></p>\\n\\n<p><code>LaravelMatchers::isEloquentCollection(Collection $collection = null);</code></p>\\n</blockquote>\\n\\n<p><span dir=\\"ltr\\" lang=\\"es\\">You can learn more about this package, get full installation instructions, and view the&nbsp;<a href=\\"https://github.com/jasonmccreary/laravel-test-assertions\\">source code</a>&nbsp;on GitHub.</span></p><hr />\\n<p>Last updated on&nbsp;March 25th, 2025</p>","tags":["#PHP","#Laravel","#Testing","#Assertions","#Package"]},{"id":6,"image":"/images/blogs/WHISP.png","name":"Whisp is a PHP SSH Server","description":"WhispPHP is a Pure PHP SSH server created by Ashley Hindle. It is the simplest way to build PHP SSH apps and allows you to run your Laravel Prompts apps through SSH with ridiculous simplicity...","fullDescription":"<p>WhispPHP is a Pure PHP SSH server created by Ashley Hindle. It is the simplest way to build PHP SSH apps and allows you to run your Laravel Prompts apps through SSH with ridiculous simplicity.</p>\\n\\n<p>If you are starting a new application, you can use the&nbsp;<a href=\\"https://github.com/whispphp/template-project\\">existing project template</a>&nbsp;provided by Ashley, or you can add Whisp to an existing project using Composer:</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>composer require whispphp/whisp</code></p>\\n</blockquote>\\n\\n<p>Then start the Whisp server and provide the apps you would like to be made available:</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>&lt;?php</code></p>\\n<p><code>$server = new Whisp\\\\Server(port: 2222);</code></p>\\n<p><code>&nbsp;</code></p>\\n<p><code>$server->run(apps: [</code></p>\\n<p><code>&#39;default&#39; =&gt; &#39;path/to/app/helloworld.php&#39;,</code></p>\\n<p><code>&#39;guestbook&#39; =&gt; &#39;path/to/app/guestbook.php&#39;,</code></p>\\n<p><code>&#39;chat-{roomName}&#39; =&gt; &#39;path/to/app/chat.php&#39;,</code></p>\\n<p><code>]);</code></p>\\n</blockquote>\\n\\n<p>You can also let Whisp auto-discover apps or provide a single default app:</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>// Auto-discovery - looks in the &#39;apps&#39; directory and makes any apps there available</code></p>\\n<p><code>$server->run();</code></p>\\n<p><code>&nbsp;</code></p>\\n<p><code>// Pass a string with the default script that should always run</code></p>\\n<p><code>$server->run(\'path/to/app/helloworld.php\');</code></p>\\n</blockquote>\\n\\n<p>Test your apps locally with:</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>ssh localhost -p2222</code></p>\\n</blockquote>\\n\\n<h2><code># or</code></h2>\\n\\n<blockquote>\\n<p><code>ssh guestbook@localhost -p2222</code></p>\\n</blockquote>\\n\\n<p>Your users will access your apps remotely with the following:</p>\\n\\n<pre>\\n\\n&nbsp;</pre>\\n\\n<blockquote>\\n<p><code>ssh app@server</code></p>\\n</blockquote>\\n\\n<h2><code># or</code></h2>\\n\\n<blockquote>\\n<p><code>ssh server -t app</code></p>\\n</blockquote>\\n\\n<p>Ashley has created a few&nbsp;<a href=\\"https://github.com/WhispPHP/whisp.fyi/\\">example apps</a>&nbsp;for you to play with and plans to create a&nbsp;<a href=\\"https://github.com/whispphp/whisp-laravel\\">Laravel-specific package</a>,&nbsp;<a href=\\"https://github.com/whispphp/laravel-starter-kit\\">starter kit</a>&nbsp;and&nbsp;<a href=\\"https://github.com/WhispPHP/docker-image\\">Docker image</a>&nbsp;are in development, but as of this writing, they are still in development.</p>\\n\\n<p>Learn more by reading the&nbsp;<a href=\\"https://whispphp.com/docs/1.0.0/installation\\">documentation</a>&nbsp;and&nbsp;<a href=\\"https://github.com/whispphp/whisp\\">view the source code</a>&nbsp;on GitHub.</p><hr />\\n<p>Last updated on&nbsp;April 10th, 2025</p>","tags":["#PHP","#Whisp","#composer"]}]}'),S=n(1114),C=(0,o.pM)({name:"BlogSection",components:{Carousel:S.FN,Slide:S.q7,Pagination:S.dK,Navigation:S.Vx},data(){return{animationClass:"fade-in",selectedBlog:null,settings:{itemsToShow:1,snapAlign:"center"},breakpoints:{400:{itemsToShow:1.5,snapAlign:"center"},700:{itemsToShow:2.5,snapAlign:"center"},1200:{itemsToShow:3.5,snapAlign:"center"}},particlesOptions:{background:{color:{value:"transparent"}},fullScreen:{enable:!0,zIndex:-1},fpsLimit:60,interactivity:{detectsOn:"window",events:{onClick:{enable:!0,mode:"push"},onHover:{enable:!0,mode:"grab",parallax:{enable:!0,force:60,smooth:100}},touchstart:{enable:!0,mode:"push"},touchmove:{enable:!0,mode:"grab"}},modes:{grab:{distance:400,links:{opacity:.8,color:"#ffffff"}},push:{quantity:4}}},particles:{color:{value:"#64ffda"},links:{color:"#64ffda",distance:150,enable:!0,opacity:.4,width:1},move:{direction:"none",enable:!0,outModes:"bounce",random:!1,speed:2,straight:!1},number:{density:{enable:!0,area:800},value:100},opacity:{value:.5,animation:{enable:!0,speed:1,minimumValue:.1}},shape:{type:"circle"},size:{value:{min:1,max:3},animation:{enable:!0,speed:2,minimumValue:.1}}},detectRetina:!0},blogs:A.G}},methods:{toggleAnimation(){this.animationClass="fade-in"===this.animationClass?"bounce-in":"fade-in"},truncate(e,t){return e.length<=t?e:e.substring(0,t)+"..."},openBlogDetails(e){this.selectedBlog=e,document.body.style.overflow="hidden"},closeBlogDetails(){this.selectedBlog=null,document.body.style.overflow=""}}}),H=n(1241);const D=(0,H.A)(C,[["render",x],["__scopeId","data-v-1e2c5bc8"]]);var _=D}}]);
//# sourceMappingURL=301.31d18674.js.map